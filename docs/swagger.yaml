basePath: /
definitions:
  dto.AuthRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.CreateRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.GameResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.RegisterResponse:
    properties:
      id:
        type: string
      username:
        type: string
    type: object
  dto.ScoreResponse:
    properties:
      game_id:
        type: string
      game_name:
        type: string
      points:
        type: integer
      user_id:
        type: string
      username:
        type: string
    type: object
  dto.SubmitScoreRequest:
    properties:
      game_id:
        type: string
      points:
        minimum: 0
        type: integer
      user_id:
        type: string
    required:
    - game_id
    - points
    - user_id
    type: object
host: localhost:8080
info:
  contact:
    email: martin@example.com
    name: Mart√≠n Arias
  description: API for managing players, games and scores
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Scoring API
  version: "2.0"
paths:
  /api/games:
    get:
      description: Retrieves all games available in the system.
      produces:
      - application/json
      responses:
        "200":
          description: List of games
          schema:
            items:
              $ref: '#/definitions/dto.GameResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get list of games
      tags:
      - games
    post:
      consumes:
      - application/json
      description: Adds a new game to the system with a unique name.
      parameters:
      - description: Game to create
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Game created successfully
          schema:
            $ref: '#/definitions/dto.GameResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Game already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new game
      tags:
      - games
  /api/scores:
    put:
      consumes:
      - application/json
      description: Submits or updates the score for a user in a specific game
      parameters:
      - description: Score data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SubmitScoreRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Score submitted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User or game not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Score not allowed
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Submit a score
      tags:
      - scores
  /api/scores/game:
    get:
      description: Lists user scores for a specific game
      parameters:
      - description: Game ID
        in: query
        name: game_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ScoreResponse'
            type: array
        "400":
          description: Invalid game ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Game or scores not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get scores by game
      tags:
      - scores
  /api/scores/game/stats:
    get:
      description: Calculates mean, median, and mode for a game's scores
      parameters:
      - description: Game ID
        in: query
        name: game_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid game ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No scores found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get game score statistics
      tags:
      - scores
  /api/scores/user:
    get:
      description: Lists game scores for a specific user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ScoreResponse'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get scores by user
      tags:
      - scores
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: 'error: Invalid request'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: Internal error'
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a user with a username and password
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: 'error: Invalid request'
          schema:
            additionalProperties: true
            type: object
        "409":
          description: 'error: Username already exists'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: Internal error'
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
